services:
  mysql:
    image: mysql:8.0  # You can change the version to the one you need.
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword   
      MYSQL_DATABASE: printerapp        
      MYSQL_USER: printerapp                    
      MYSQL_PASSWORD: printerapp        
    ports:
      - "3306:3306"                        
    volumes:
      - mysql-data:/var/lib/mysql          
    networks:
      - application
    command: >
      bash -c "
        echo \"
          CREATE USER IF NOT EXISTS 'exporter'@'%' IDENTIFIED BY 'exporter';
          GRANT PROCESS, REPLICATION CLIENT, SELECT ON *.* TO 'exporter'@'%' WITH GRANT OPTION;
          FLUSH PRIVILEGES;
        \" > /docker-entrypoint-initdb.d/init.sql;
       /entrypoint.sh mysqld       
      "

  mysql-exporter:
    image: prom/mysqld-exporter:latest
    container_name: mysql-exporter
    command:
     - "--mysqld.username=exporter:exporter"
     - "--mysqld.address=mysql:3306"
    depends_on:
      - mysql
    networks:
      - monitoring

  minio:
    image: minio/minio:latest
    container_name: minio
    environment:
      MINIO_ACCESS_KEY: "minio_access_key"    
      MINIO_SECRET_KEY: "minio_secret_key"   
      MINIO_BUCKET_NAME: "printerapp"
    ports:
      - "9000:9000"                           
      - "9001:9001"                         
    volumes:
      - minio-data:/data                      
    entrypoint: 
    - sh 
    - -c 
    - |
      minio server /data --console-address ":9001"
      sleep 5
      mc alias set myminio http://$$MINIO_ACCESS_KEY:$$MINIO_SECRET_KEY@localhost:9000
      mc mb myminio/$$MINIO_BUCKET_NAME 
      fg
      

    networks:
      - application
  api:
    build:
      context: ./api
      dockerfile: ./Dockerfile
    container_name: api
    environment:
      SERVER_PORT: 8080
      DB_HOST: mysql
      DB_PORT: 3306
      DB_URL: jdbc:mysql://mysql:3306/printerapp
      DB_USERNAME: printerapp
      DB_PASSWORD: printerapp
      JWT_ACCESSTOKEN_KEY: your_accesstoken_key
      JWT_REFRESHTOKEN_KEY: your_refreshtoken_key
      MINIO_URL: http://minio:9000
      MINIO_ACCESS_KEY: minio_access_key
      MINIO_SECRET_KEY: minio_secret_key
      MINIO_BUCKET_NAME: printerapp
      ADMIN_EMAIL: admin@example.com
      ADMIN_PHONENUMBER: 1234567890
      GOOGLE_OAUTH2_CLIENT_ID: your_google_client_id
      GOOGLE_OAUTH2_REDIRECT_URI: http://localhost:80/oauth2/redirect
      MOMO_PARTNER_CODE: your_momo_partner_code
      MOMO_ACCESS_KEY: your_momo_access_key
      MOMO_SECRET_KEY: your_momo_secret_key
    entrypoint:
      - bash
      - -c 
      - |
        java -jar /app/app.jar
        until java -jar /app/app.jar; do
          echo "Waiting for DB connection..."
          sleep 5
        done
    ports:
      - "8080:8080"
    depends_on:
      - minio
      - mysql
    networks:
      - application
      - monitoring
  web:
    build:
      context: ./web
      dockerfile: ./Dockerfile
    environment:
      VITE_API_BASE_URL: http://api:8080
      VITE_GOOGLE_CLIENT_ID: your_google_client_id
      VITE_GOOGLE_REDIRECT_URI: http://localhost:80/oauth2/redirect
    ports:
      - "80:80"
    networks:
      - application
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    environment:
      API_HOST: api
      API_PORT: 8080
      API_METRICS_PATH: /actuator/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yaml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
    networks:
      - monitoring
    depends_on:
      - api

volumes:
  mysql-data:
  minio-data:
  prometheus-data:


networks:
  monitoring:
  application: